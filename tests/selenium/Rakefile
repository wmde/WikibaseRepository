# Wikidata UI tests
#
# Author:: Tobias Gritschacher (tobias.gritschacher@wikimedia.de)
# License:: GNU GPL v2+
#
# RAKEFILE

require 'rubygems'
require 'rspec/core/rake_task'

RSpec::Core::RakeTask.new(:all) do |spec|
  spec.ruby_opts = "-I lib:spec"
  spec.pattern = 'spec/*/*_spec.rb'
end

RSpec::Core::RakeTask.new(:spec_item) do |spec|
  spec.ruby_opts = "-I lib:spec"
  spec.pattern = 'spec/item/*_spec.rb'
end

RSpec::Core::RakeTask.new(:spec_description) do |spec|
  spec.ruby_opts = "-I lib:spec"
  spec.pattern = 'spec/item/description_spec.rb'
end

RSpec::Core::RakeTask.new(:spec_empty_item) do |spec|
  spec.ruby_opts = "-I lib:spec"
  spec.pattern = 'spec/item/empty_item_spec.rb'
end

RSpec::Core::RakeTask.new(:spec_non_existing_item) do |spec|
  spec.ruby_opts = "-I lib:spec"
  spec.pattern = 'spec/item/non_existing_item_spec.rb'
end

RSpec::Core::RakeTask.new(:spec_label) do |spec|
  spec.ruby_opts = "-I lib:spec"
  spec.pattern = 'spec/item/label_spec.rb'
end

RSpec::Core::RakeTask.new(:spec_sitelinks) do |spec|
  spec.ruby_opts = "-I lib:spec"
  spec.pattern = 'spec/sitelinks/*_spec.rb'
end

RSpec::Core::RakeTask.new(:spec_newitem) do |spec|
  spec.ruby_opts = "-I lib:spec"
  spec.pattern = 'spec/item/new_item_spec.rb'
end

RSpec::Core::RakeTask.new(:spec_aliases) do |spec|
  spec.ruby_opts = "-I lib:spec"
  spec.pattern = 'spec/aliases/*_spec.rb'
end

RSpec::Core::RakeTask.new(:spec_aliases_bugs) do |spec|
  spec.ruby_opts = "-I lib:spec"
  spec.pattern = 'spec/aliases/aliases_bugs_spec.rb'
end

RSpec::Core::RakeTask.new(:spec_blocked_user) do |spec|
  spec.ruby_opts = "-I lib:spec"
  spec.pattern = 'spec/item/blocked_user_spec.rb'
end

RSpec::Core::RakeTask.new(:spec_protected_page) do |spec|
  spec.ruby_opts = "-I lib:spec"
  spec.pattern = 'spec/item/protected_page_spec.rb'
end

RSpec::Core::RakeTask.new(:spec_search) do |spec|
  spec.ruby_opts = "-I lib:spec"
  spec.pattern = 'spec/special/search_spec.rb'
end

RSpec::Core::RakeTask.new(:spec_recentchanges) do |spec|
  spec.ruby_opts = "-I lib:spec"
  spec.pattern = 'spec/special/recent_changes_spec.rb'
end

RSpec::Core::RakeTask.new(:spec_language_selector) do |spec|
  spec.ruby_opts = "-I lib:spec"
  spec.pattern = 'spec/language_selector/language_selector_spec.rb'
end

RSpec::Core::RakeTask.new(:spec_item_deletion) do |spec|
  spec.ruby_opts = "-I lib:spec"
  spec.pattern = 'spec/item/delete_item_spec.rb'
end

RSpec::Core::RakeTask.new(:spec_bugs) do |spec|
  spec.ruby_opts = "-I lib:spec"
  spec.pattern = 'spec/item/bugs_spec.rb'
end

RSpec::Core::RakeTask.new(:spec_editonoff) do |spec|
  spec.ruby_opts = "-I lib:spec"
  spec.pattern = 'spec/item/editonoff_spec.rb'
end

RSpec::Core::RakeTask.new(:spec_client_repo) do |spec|
  spec.ruby_opts = "-I lib:spec"
  spec.pattern = 'spec/client/client_repo_spec.rb'
end

RSpec::Core::RakeTask.new(:spec_undo) do |spec|
  spec.ruby_opts = "-I lib:spec"
  spec.pattern = 'spec/special/undo_spec.rb'
end

RSpec::Core::RakeTask.new(:spec_rollback) do |spec|
  spec.ruby_opts = "-I lib:spec"
  spec.pattern = 'spec/special/rollback_spec.rb'
end

RSpec::Core::RakeTask.new(:spec_restore) do |spec|
  spec.ruby_opts = "-I lib:spec"
  spec.pattern = 'spec/special/restore_spec.rb'
end

task :default => :run_tests
task :item => :spec_item
task :nonexistingitem => :spec_non_existing_item
task :description => :spec_description
task :emptyitem => :spec_empty_item
task :label => :spec_label
task :sitelinks => :spec_sitelinks
task :newitem => :spec_newitem
task :aliases => :spec_aliases
task :aliases_bugs => :spec_aliases_bugs
task :blocked_user => :spec_blocked_user
task :protected_page => :spec_protected_page
task :search => :spec_search
task :recentchanges => :spec_recentchanges
task :language_switcher => :spec_language_selector
task :delete_item => :spec_item_deletion
task :editonoff => :spec_editonoff
task :bugs => :spec_bugs
task :client_repo => :spec_client_repo
task :undo => :spec_undo
task :rollback => :spec_rollback
task :restore => :spec_restore

task :run_tests, :taskname, :browser, :remote, :os do |t, args|
  task = args[:taskname] || :all
  setup_env(args[:browser], args[:remote], args[:os])
  Rake::Task[task].invoke
end

def setup_env(browser, remote, os)
  ENV["BROWSER_TYPE"] = browser
  ENV["RUN_REMOTE"] = remote
  ENV["TARGET_OS"] = os
end
